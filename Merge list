#include <bits/stdc++.h>
using namespace std;
typedef long long int lli;
#define md 1000000007
lli power(lli x,lli y,lli p) 
{ 
    lli res = 1;      // Initialize result 
  
    x = x % p;  // Update x if it is more than or 
                // equal to p 
  
    while (y > 0) 
    { 
        // If y is odd, multiply x with result 
        if (y & 1) 
            res = (res*x) % p; 
  
        // y must be even now 
        y = y>>1; // y = y/2 
        x = (x*x) % p; 
    } 
    return res; 
} 
  
// Returns n^(-1) mod p 
lli modInverse(lli n,lli p) 
{ 
    return power(n, p-2, p); 
} 
  
// Returns nCr % p using Fermat's little 
// theorem. 
lli nCrModPFermat(lli n,lli r,lli p) 
{ 
   // Base case 
   if (r==0) 
      return 1; 
  
    // Fill factorial array so that we 
    // can find all factorial of r, n 
    // and n-r 
    lli fac[n+1]; 
    fac[0] = 1; 
    for (lli i=1 ; i<=n; i++) 
        fac[i] = fac[i-1]*i%p; 
  
    return (fac[n]* modInverse(fac[r], p) % p * 
            modInverse(fac[n-r], p) % p) % p; 
} 
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    lli t,n,m;
    cin>>t;
    while(t--)
    {
        cin>>n>>m;
        cout<<nCrModPFermat(n+m,n,md)<<"\n";
    }
 
    return 0;
}
